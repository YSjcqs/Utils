<?xml version="1.0" encoding="utf-8"?>
<root xmlns:android="http://schemas.android.com/apk/res/android">
    <init>
        <log text=" NativeAndroidPlatform_UPL INIT"/>
    </init>

    <androidManifestUpdates>
        <addPermission android:name="android.permission.RECORD_AUDIO"/>
        <addPermission android:name="android.permission.MOUNT_UNMOUNT_FILESYSTEMS"/>
        <addPermission android:name="android.permission.WRITE_EXTERNAL_STORAGE"/>
        <addPermission android:name="android.permission.READ_PHONE_STATE"/>
        <addPermission android:name="android.permission.MANAGE_EXTERNAL_STORAGE"/>
        <addPermission android:name="android.permission.READ_EXTERNAL_STORAGE"/>
        <addPermission android:name="android.permission.READ_PRIVILEGED_PHONE_STATE"/>
    </androidManifestUpdates>
    
    <resourceCopies>
        <copyDir src = "$S(PluginDir)/../ThirdParty/Android/Nui" dst = "$S(BuildDir)/libs" />
        <copyDir src = "$S(PluginDir)/../Android/Java" dst = "$S(BuildDir)/src/com/epicgames/unreal" />
    </resourceCopies>

    <gameActivityImportAdditions>
        <insert>
<![CDATA[
import com.epicgames.unreal.speechrec.NuiSpeechManager;
]]>
        </insert>
    </gameActivityImportAdditions>

    <gameActivityClassAdditions>
        <insert>
<![CDATA[
    private NuiSpeechManager SpeechManager = new NuiSpeechManager();

	public void initNuiSdk(String app_key, String accessKeyId, String accessKeySecret) {
		SpeechManager.initialize(this, app_key, app_key, accessKeySecret);
	}

	public void releaseNuiSdk() {
		SpeechManager.speechTranscriber.releaseDialog();
		SpeechManager.ttsBasic.releaseTts();
	}
	
	public void releaseDialog() {
		SpeechManager.speechTranscriber.releaseDialog();
	}
	
	public void releaseTts() {
		SpeechManager.ttsBasic.releaseTts();
	}

	public void dialogAudioPermissions() {
		SpeechManager.audioPermissions(this);
	}

	public boolean startDialog() {
		if (SpeechManager.speechTranscriber.checkNotInitToast()) {
			SpeechManager.speechTranscriber.startDialog();
			return true;
		}
		return false;
	}

	public boolean stopDialog() {
		if (SpeechManager.speechTranscriber.checkNotInitToast()) {
			SpeechManager.speechTranscriber.stopDialog();
			return true;
		}
		return false;
	}

	public boolean checkDialog(){
		return SpeechManager.speechTranscriber.checkNotInitToast();
	}

	public boolean startTts(String ttsText){
		if (SpeechManager.ttsBasic.checkNotInitToast()){
			SpeechManager.ttsBasic.startTts(ttsText);
			return true;
		}
		return false;
	}

	public boolean quitTts(){
		if (SpeechManager.ttsBasic.checkNotInitToast()){
			SpeechManager.ttsBasic.quitTts();
			return true;
		}
		return false;
	}

	public boolean cancelTts(){
		if (SpeechManager.ttsBasic.checkNotInitToast()){
			SpeechManager.ttsBasic.cancelTts();
			return true;
		}
		return false;
	}

	public boolean pauseTts(){
		if (SpeechManager.ttsBasic.checkNotInitToast()){
			SpeechManager.ttsBasic.pauseTts();
			return true;
		}
		return false;
	}

	public boolean resumeTts(){
		if (SpeechManager.ttsBasic.checkNotInitToast()){
			SpeechManager.ttsBasic.resumeTts();
			return true;
		}
		return false;
	}

	public boolean checkTts(){
		return SpeechManager.ttsBasic.checkNotInitToast();
	}
	
	public void setFontName(String name) {
        SpeechManager.ttsBasic.setFontName(name);
    }
]]>
        </insert>
    </gameActivityClassAdditions>

    <gameActivityOnCreateAdditions>
        <insert>
        </insert>
    </gameActivityOnCreateAdditions>

    <baseBuildGradleAdditions>
        <insert>
<![CDATA[
]]>
        </insert>
    </baseBuildGradleAdditions>

    <buildGradleAdditions>
        <insert>
<![CDATA[
repositories {
    flatDir{ dirs '/src/main/libs/' }
}
dependencies {
    implementation fileTree(dir: 'libs', include: ['*.aar'])
	implementation fileTree(dir: 'src/main/libs', include: ['*.aar'])
}
]]>
        </insert>
    </buildGradleAdditions>

</root>
